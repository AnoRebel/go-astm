package e2e

import (
	"fmt"
	"io/ioutil"
	"testing"
	"time"

	"github.com/DRK-Blutspende-BaWueHe/go-astm/astm1384"
	"github.com/stretchr/testify/assert"
)

type Message struct {
	Header       Header       `astm:"H"`
	Manufacturer Manufacturer `astm:"M,optional"`
	Patient      Patient      `astm:"P"`
	Order        Order        `astm:"O"`
	Result       Result       `astm:"R"`
	Terminator   Terminator   `astm:"L"`
}

func TestReadFileBeCom52_v2(t *testing.T) {
	fileData, err := ioutil.ReadFile("../protocoltest/becom/5.2/bloodtype_test.astm")
	if err != nil {
		fmt.Println("Failed : ", err)
		return
	}

	var message Message
	err = astm1384.Unmarshal2(fileData, &message,
		astm1384.EncodingUTF8, astm1384.TimezoneEuropeBerlin, astm1384.LIS2A2)
	if err != nil {
		fmt.Println("Error: ", err)
		return
	}

	fmt.Printf("Decoded:\n%+v\n", message)

}

type MinimalMessage struct {
	Header     Header     `astm:"H"`
	Terminator Terminator `astm:"L"`
}

func TestReadMinimalMessage_v2(t *testing.T) {
	fileData := ""
	fileData = fileData + "H|\\^&|||Bio-Rad|IH v5.2||||||||20220315194227\n"
	fileData = fileData + "L|1|N\n"

	var message MinimalMessage
	err := astm1384.Unmarshal2([]byte(fileData), &message,
		astm1384.EncodingUTF8, astm1384.TimezoneEuropeBerlin, astm1384.LIS2A2)
	if err != nil {
		fmt.Println("Error: ", err)
		return
	}

	locale, err := time.LoadLocation("Europe/Berlin")
	assert.Nil(t, err)

	assert.Equal(t, "Bio-Rad", message.Header.SenderNameOrID)
	assert.Equal(t, "IH v5.2", message.Header.SenderStreetAddress)
	assert.Equal(t, "", message.Header.Comment)

	localtime := message.Header.DateAndTime.In(locale)
	assert.Equal(t, "20220315194227", localtime.Format("20060102150405"))
}

/* tstcae array */
type MessagePOR struct {
	Header       Header       `astm:"H"`
	Manufacturer Manufacturer `astm:"M,optional"`
	OrderResults []struct {
		Patient         Patient `astm:"P"`
		Order           Order   `astm:"O"`
		CommentedResult []struct {
			result  Result    `astm:"R"`
			comment []Comment `astm:"C,optional"`
		}
	}
	Terminator Terminator `astm:"L"`
}

func TestReadFileBeComPOR_v2(t *testing.T) {
	fileData, err := ioutil.ReadFile("../protocoltest/becom/5.2/bloodtype_test_por.astm")
	if err != nil {
		fmt.Println("Failed : ", err)
		return
	}
	var message MessagePOR
	err = astm1384.Unmarshal2(fileData, &message,
		astm1384.EncodingUTF8, astm1384.TimezoneEuropeBerlin, astm1384.LIS2A2)
	if err != nil {
		fmt.Println("Error: ", err)
		return
	}

}
